
final VERSION = '0.8.0'
version VERSION

buildscript {
    ext.kotlin_version = '1.3.72'
    ext.dokka_version = '0.10.1'

    repositories {
        mavenCentral()
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"

        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka'

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName VERSION
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
        }

        release {
            minifyEnabled false
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = '1.6'
        freeCompilerArgs = ["-Xuse-experimental=kotlin.Experimental"]
    }
}

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/wcaokaze/maven' }
}

dependencies {
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib'
    compileOnly 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8'

    api "com.wcaokaze:cac7er:$VERSION"
    api "com.wcaokaze.vue.android:vue-android-core:0.2.0"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jetbrains.kotlin:kotlin-stdlib'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.8'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8'
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        substitute module("com.wcaokaze:cac7er:$VERSION") with project(':Cac7er')
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$projectDir/../docs/cac7er-vue"

    configuration {
        moduleName = 'Cac7er-Vue'

        includes = []
        jdkVersion = 6

        skipEmptyPackages = true
        reportUndocumented = false

        sourceLink {
            path = "$projectDir/src/main/java"
            url = 'https://github.com/wcaokaze/Cac7er/blob/master/cac7er-vue/src/main/java'
            lineSuffix = '#L'
        }

        externalDocumentationLink {
            url = new URL('https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/')
        }

        externalDocumentationLink {
            url = new URL('https://wcaokaze.github.io/Vue.android/vue-android-core/-vue.android/')
        }
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from dokka.outputDirectory
}

javadocJar.dependsOn(dokka)

final pomConfig = {
    licenses {
        license {
            name 'MIT License'
            url 'http://opensource.org/licenses/mit-license.php'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'wcaokaze'
            name 'wcaokaze'
            email 'wcaokaze@gmail.com'
        }
    }

    scm {
        url 'https://github.com/wcaokaze/Cac7er.git'
        connection 'scm:git:https://github.com/wcaokaze/Cac7er.git'
        developerConnection 'scm:git:https://github.com/wcaokaze/Cac7er.git'
    }
}

publishing {
    publications {
        Cac7er_Vue(MavenPublication) {
            groupId 'com.wcaokaze'
            artifactId 'cac7er-vue'
            version VERSION

            artifact sourcesJar
            artifact javadocJar
            artifact "$buildDir/outputs/aar/Cac7er-Vue-release.aar"

            pom.withXml {
                final rootNode = asNode()

                final dependenciesNode = rootNode['dependencies'][0]
                        ?: rootNode.appendNode('dependencies')

                rootNode.appendNode('name', 'Cac7er-Vue')

                for (dependency in configurations.implementation.allDependencies) {
                    if (dependency.name == 'unspecified') { continue }

                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId',    dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version',    dependency.version)
                }

                rootNode.children().last() + pomConfig
            }
        }
    }
}

publish.dependsOn(sourcesJar, javadocJar, 'assembleRelease')

bintray {
    final props = new Properties()
    props.load(project.file('local.properties').newDataInputStream())

    user = props.getProperty('bintray.user')
    key = props.getProperty('bintray.apiKey')

    publications = ['Cac7er_Vue']

    pkg {
        repo = 'maven'
        name = 'Cac7er-Vue'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/wcaokaze/Cac7er'

        version {
            name = VERSION
            released = new Date()
            vcsTag = "v$VERSION"
        }
    }
}

bintrayUpload.dependsOn(publish)
